Index: linux-txmp-1570/drivers/input/touchscreen/edt-ft5x06.c
===================================================================
--- linux-txmp-1570.orig/drivers/input/touchscreen/edt-ft5x06.c
+++ linux-txmp-1570/drivers/input/touchscreen/edt-ft5x06.c
@@ -133,6 +133,9 @@ struct edt_ft5x06_ts_data {
 
 	char name[EDT_NAME_LEN];
 	char fw_version[EDT_NAME_LEN];
+	u8 wrbuf[4];
+	u8 rdbuf[EDT_NAME_LEN];
+	u8 irqbuf[64];
 
 	struct edt_reg_addr reg_addr;
 	enum edt_ver version;
@@ -200,15 +203,17 @@ static irqreturn_t edt_ft5x06_ts_isr(int
 {
 	struct edt_ft5x06_ts_data *tsdata = dev_id;
 	struct device *dev = &tsdata->client->dev;
-	u8 cmd;
-	u8 rdbuf[63];
+	u8 *cmd = &tsdata->irqbuf[0];
+	u8 *rdbuf = &tsdata->irqbuf[1];
 	int i, type, x, y, id;
 	int offset, tplen, datalen, crclen;
 	int error;
 
+	memset(tsdata->irqbuf, 0, sizeof(tsdata->irqbuf));
+
 	switch (tsdata->version) {
 	case EDT_M06:
-		cmd = 0xf9; /* tell the controller to send touch data */
+		*cmd = 0xf9; /* tell the controller to send touch data */
 		offset = 5; /* where the actual touch data starts */
 		tplen = 4;  /* data comes in so called frames */
 		crclen = 1; /* length of the crc data */
@@ -218,7 +223,7 @@ static irqreturn_t edt_ft5x06_ts_isr(int
 	case EDT_M12:
 	case EV_FT:
 	case GENERIC_FT:
-		cmd = 0x0;
+		*cmd = 0x0;
 		offset = 3;
 		tplen = 6;
 		crclen = 0;
@@ -228,12 +233,9 @@ static irqreturn_t edt_ft5x06_ts_isr(int
 		goto out;
 	}
 
-	memset(rdbuf, 0, sizeof(rdbuf));
 	datalen = tplen * tsdata->max_support_points + offset + crclen;
 
-	error = edt_ft5x06_ts_readwrite(tsdata->client,
-					sizeof(cmd), &cmd,
-					datalen, rdbuf);
+	error = edt_ft5x06_ts_readwrite(tsdata->client, 1, cmd, datalen, rdbuf);
 	if (error) {
 		dev_err_ratelimited(dev, "Unable to fetch data, error: %d\n",
 				    error);
@@ -292,7 +294,7 @@ out:
 static int edt_ft5x06_register_write(struct edt_ft5x06_ts_data *tsdata,
 				     u8 addr, u8 value)
 {
-	u8 wrbuf[4];
+	u8 *wrbuf = tsdata->wrbuf;
 
 	switch (tsdata->version) {
 	case EDT_M06:
@@ -321,7 +323,8 @@ static int edt_ft5x06_register_write(str
 static int edt_ft5x06_register_read(struct edt_ft5x06_ts_data *tsdata,
 				    u8 addr)
 {
-	u8 wrbuf[2], rdbuf[2];
+	u8 *rdbuf = tsdata->rdbuf;
+	u8 *wrbuf = tsdata->wrbuf;
 	int error;
 
 	switch (tsdata->version) {
@@ -767,7 +770,7 @@ static ssize_t edt_ft5x06_debugfs_raw_da
 	int val, i, error;
 	size_t read = 0;
 	int colbytes;
-	char wrbuf[3];
+	char *wrbuf = tsdata->wrbuf;
 	u8 *rdbuf;
 
 	if (*off < 0 || *off >= tsdata->raw_bufsize)
@@ -816,7 +819,7 @@ static ssize_t edt_ft5x06_debugfs_raw_da
 	for (i = 0; i < tsdata->num_x; i++) {
 		wrbuf[2] = i;  /* column index */
 		error = edt_ft5x06_ts_readwrite(tsdata->client,
-						sizeof(wrbuf), wrbuf,
+						3, wrbuf,
 						colbytes, rdbuf);
 		if (error)
 			goto out;
@@ -882,7 +885,8 @@ static void edt_ft5x06_ts_teardown_debug
 static int edt_ft5x06_ts_identify(struct i2c_client *client,
 				  struct edt_ft5x06_ts_data *tsdata)
 {
-	u8 rdbuf[EDT_NAME_LEN];
+	u8 *cmd = tsdata->wrbuf;
+	u8 *rdbuf = tsdata->rdbuf;
 	char *p;
 	int error;
 	char *model_name = tsdata->name;
@@ -892,8 +896,9 @@ static int edt_ft5x06_ts_identify(struct
 	 * if we get less than EDT_NAME_LEN, we don't want
 	 * to have garbage in there
 	 */
-	memset(rdbuf, 0, sizeof(rdbuf));
-	error = edt_ft5x06_ts_readwrite(client, 1, "\xBB",
+	memset(tsdata->rdbuf, 0, sizeof(tsdata->rdbuf));
+	*cmd = 0xbb;
+	error = edt_ft5x06_ts_readwrite(client, 1, cmd,
 					EDT_NAME_LEN - 1, rdbuf);
 	if (error)
 		return error;
@@ -905,8 +910,8 @@ static int edt_ft5x06_ts_identify(struct
 	if (!strncasecmp(rdbuf + 1, "EP0", 3)) {
 		tsdata->version = EDT_M06;
 
-		/* remove last '$' end marker */
 		rdbuf[EDT_NAME_LEN - 1] = '\0';
+		/* remove last '$' end marker */
 		if (rdbuf[EDT_NAME_LEN - 2] == '$')
 			rdbuf[EDT_NAME_LEN - 2] = '\0';
 
@@ -942,15 +947,15 @@ static int edt_ft5x06_ts_identify(struct
 		 */
 		tsdata->version = GENERIC_FT;
 
-		error = edt_ft5x06_ts_readwrite(client, 1, "\xA6",
-						2, rdbuf);
+		*cmd = 0xa6;
+		error = edt_ft5x06_ts_readwrite(client, 1, cmd, 2, rdbuf);
 		if (error)
 			return error;
 
 		strscpy(fw_version, rdbuf, 2);
 
-		error = edt_ft5x06_ts_readwrite(client, 1, "\xA8",
-						1, rdbuf);
+		*cmd = 0xa8;
+		error = edt_ft5x06_ts_readwrite(client, 1, cmd, 1, rdbuf);
 		if (error)
 			return error;
 
@@ -983,8 +988,9 @@ static int edt_ft5x06_ts_identify(struct
 			break;
 		case 0x59:  /* Evervision Display with FT5xx6 TS */
 			tsdata->version = EV_FT;
-			error = edt_ft5x06_ts_readwrite(client, 1, "\x53",
-							1, rdbuf);
+
+			*cmd = 0x53;
+			error = edt_ft5x06_ts_readwrite(client, 1, cmd, 1, rdbuf);
 			if (error)
 				return error;
 			strscpy(fw_version, rdbuf, 1);
@@ -998,7 +1004,6 @@ static int edt_ft5x06_ts_identify(struct
 			break;
 		}
 	}
-
 	return 0;
 }
 
@@ -1142,7 +1147,7 @@ static int edt_ft5x06_ts_probe(struct i2
 {
 	const struct edt_i2c_chip_data *chip_data;
 	struct edt_ft5x06_ts_data *tsdata;
-	u8 buf[2] = { 0xfc, 0x00 };
+	u8 *buf;
 	struct mipi_dsi_device *panel;
 	struct device_node *np;
 	struct input_dev *input;
@@ -1294,6 +1299,8 @@ static int edt_ft5x06_ts_probe(struct i2
 	 * Dummy read access. EP0700MLP1 returns bogus data on the first
 	 * register read access and ignores writes.
 	 */
+	buf = tsdata->rdbuf;
+	buf[0] = 0xfc;
 	edt_ft5x06_ts_readwrite(tsdata->client, 2, buf, 2, buf);
 
 	edt_ft5x06_ts_set_regs(tsdata);
